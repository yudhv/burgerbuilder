{"version":3,"sources":["components/Burger/BurgerIngredients/BurgerIngredients.module.css","components/Layout/Layout.module.css","components/Burger/Burger.module.css","hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredients/BurgerIngredients.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Content","Burger","aux","props","children","layout","react_default","a","createElement","Aux","className","classes","burgerIngredients","ingredient","type","burger","ingredientKeys","Object","keys","ingredients","ingredientValues","values","ingredientJSX","map","key","i","toConsumableArray","Array","_","j","BurgerIngredients","BurgerBuilder","state","meat","cheese","bacon","salad","this","Component","App","Layout","containers_BurgerBuilder_BurgerBuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,YAAA,uCAAAC,SAAA,oCAAAC,OAAA,kCAAAC,OAAA,kCAAAC,KAAA,gCAAAC,OAAA,kCAAAC,MAAA,iCAAAC,MAAA,0DCAlBT,EAAAC,QAAA,CAAkBS,QAAA,0CCAlBV,EAAAC,QAAA,CAAkBU,OAAA,qMCCHC,EAFH,SAACC,GAAD,OAAYA,EAAMC,0BCafC,EATA,SAACF,GAAD,OACXG,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAQX,SACpBG,EAAMC,qDCgCJQ,EApCW,SAACT,GACvB,IAAIU,EAAa,KACjB,OAAQV,EAAMW,MACV,IAAM,eACFD,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQnB,cACrC,MACJ,IAAM,YACFqB,EACIP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQlB,UACpBa,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQjB,SACxBY,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQhB,UAEhC,MACJ,IAAK,OACDkB,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQf,OACrC,MACJ,IAAK,QACDiB,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQb,QACrC,MACJ,IAAK,SACDe,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQd,SACrC,MACJ,IAAK,QACDgB,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQZ,QACrC,MACJ,QACIc,EAAaP,EAAAC,EAAAC,cAAA,oBAGrB,OAAOK,GCXIE,EAlBA,SAACZ,GACZ,IAAMa,EAAiBC,OAAOC,KAAKf,EAAMgB,aACnCC,EAAmBH,OAAOI,OAAOlB,EAAMgB,aACvCG,EAAgBN,EAAeO,IAAK,SAACC,EAAKC,GAC5C,OAAOR,OAAAS,EAAA,EAAAT,CAAIU,MAAMP,EAAiBK,KAAKF,IAAI,SAACK,EAAEC,GAC1C,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,CAAmBhB,KAAMU,EAAKA,IAAKA,EAAIK,QAItD,OACIvB,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQV,QACpBK,EAAAC,EAAAC,cAACsB,EAAD,CAAmBhB,KAAK,cACvBQ,EACDhB,EAAAC,EAAAC,cAACsB,EAAD,CAAmBhB,KAAK,mBCQrBiB,6MAnBXC,MAAQ,CACJb,YAAa,CACTc,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPC,MAAO,4EAKX,OACA9B,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAACP,EAAD,CAAQkB,YAAakB,KAAKL,MAAMb,cAChCb,EAAAC,EAAAC,cAAA,kCAfgB8B,aCUbC,mLARX,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAD,cAJUH,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f367885.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredients_BreadBottom__1msD0\",\"BreadTop\":\"BurgerIngredients_BreadTop__3TedM\",\"Seeds1\":\"BurgerIngredients_Seeds1__3Rpk7\",\"Seeds2\":\"BurgerIngredients_Seeds2__PInAs\",\"Meat\":\"BurgerIngredients_Meat__2YVYt\",\"Cheese\":\"BurgerIngredients_Cheese__Dnpjv\",\"Salad\":\"BurgerIngredients_Salad__1WeLz\",\"Bacon\":\"BurgerIngredients_Bacon__2A2x4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__2Vq44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__2r1RP\"};","const aux = (props) => (props.children);\r\n\r\nexport default aux;\r\n","import React from 'react';\r\nimport Aux from '../../hoc/Aux';\r\nimport classes from './Layout.module.css';\r\n\r\nconst layout = (props) => (\r\n    <Aux>\r\n        <div>Toolbar, SideDrawer, and Backdrop</div>\r\n        <main className={classes.Content}>\r\n            {props.children}\r\n        </main>\r\n    </Aux>\r\n);\r\n\r\nexport default layout;\r\n","import React from 'react';\r\nimport classes from './BurgerIngredients.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst burgerIngredients = (props) => {\r\n    let ingredient = null;\r\n    switch (props.type) {\r\n        case ('bread-bottom'):\r\n            ingredient = <div className={classes.BreadBottom}></div>\r\n            break;\r\n        case ('bread-top'):\r\n            ingredient =\r\n                <div className={classes.BreadTop}>\r\n                    <div className={classes.Seeds1}></div>\r\n                    <div className={classes.Seeds2}></div>\r\n                </div>\r\n            break;\r\n        case 'meat':\r\n            ingredient = <div className={classes.Meat}></div>\r\n            break;\r\n        case 'salad':\r\n            ingredient = <div className={classes.Salad}></div>\r\n            break;\r\n        case 'cheese':\r\n            ingredient = <div className={classes.Cheese}></div>\r\n            break;\r\n        case 'bacon':\r\n            ingredient = <div className={classes.Bacon}></div>\r\n            break;\r\n        default:\r\n            ingredient = <div>Error</div>;\r\n            break;\r\n    }\r\n    return ingredient;\r\n}\r\n\r\nburgerIngredients.propTypes = {\r\n    type: PropTypes.string.isRequired\r\n}\r\n\r\nexport default burgerIngredients;\r\n","import React from 'react';\r\nimport classes from './Burger.module.css';\r\nimport BurgerIngredients from './BurgerIngredients/BurgerIngredients';\r\n\r\nconst burger = (props) => {\r\n    const ingredientKeys = Object.keys(props.ingredients);\r\n    const ingredientValues = Object.values(props.ingredients);\r\n    const ingredientJSX = ingredientKeys.map( (key, i) => {\r\n        return [...Array(ingredientValues[i])].map((_,j) => {\r\n            return <BurgerIngredients type={key} key={key+j}/>\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className={classes.Burger}>\r\n            <BurgerIngredients type='bread-top'></BurgerIngredients>\r\n            {ingredientJSX}\r\n            <BurgerIngredients type='bread-bottom'></BurgerIngredients>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default burger;\r\n","import React, { Component } from 'react';\r\nimport Aux from '../../hoc/Aux';\r\nimport Burger from '../../components/Burger/Burger';\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    state = {\r\n        ingredients: {\r\n            meat: 2,\r\n            cheese: 1,\r\n            bacon: 1,\r\n            salad: 2\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n        <Aux>\r\n            <Burger ingredients={this.state.ingredients}></Burger>\r\n            <div>Build Tools</div>\r\n        </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder;\r\n","import React, { Component } from 'react';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <BurgerBuilder></BurgerBuilder>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}